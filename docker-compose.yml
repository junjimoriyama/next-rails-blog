
services:
  # データベース
  db:
    image: mysql:8.0
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: sample
      MYSQL_PASSWORD: password
    ports:
      - 4306:4306
      # データを永続的に残す
    volumes:
      - mysql-db:/var/lib/mysql
  
  # バックエンド
  api:
    tty: true
    depends_on:
      - db
    build:
      context: ./api/
      dockerfile: Dockerfile
    command: /bin/sh -c "rm -f tmp/pids/server.pid  && bundle exec rails s -p 3000 -b '0.0.0.0'"
    ports:
      - 3000:3000
    volumes:
      - ./api:/app

  # フロントエンド
  web:
    build:
      context: ./web/
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    volumes:
      - ./web:/app 

volumes:
  mysql-db:
    driver: local

# 初めにnext-rails-blog作成　→　composeファイル　→　api,webフォルダ作成　→ next create　→  rails create
# (composeにpackage.json,Gemfileの記載があるとnext、railsを先に立ち上げないとエラーになる)
# gitでリポジトリ作成（）


# ステップ 1: ユーザーと投稿を関連付ける
# まず、Post モデルに user_id を追加し、投稿がどのユーザーによって作成されたかを管理します。

# 1. マイグレーションファイルを作成して posts テーブルに user_id カラムを追加
# bash
# コードをコピーする
# rails generate migration AddUserIdToPosts user_id:integer
# rails db:migrate
# 2. モデルの関連付け
# User モデルと Post モデルを関連付けます。

# User モデル (app/models/user.rb):
# ruby
# コードをコピーする
# class User < ApplicationRecord
#   has_many :posts, dependent: :destroy
# end
# Post モデル (app/models/post.rb):
# ruby
# コードをコピーする
# class Post < ApplicationRecord
#   belongs_to :user
# end
# ステップ 2: 投稿を作成する際にユーザーを関連付ける
# 認証されたユーザーが投稿を作成する際に、投稿とユーザーを紐付けます。

# PostsController の create アクションを修正
# 投稿を作成するときに、現在のユーザーを post.user_id に設定します。

# ruby
# コードをコピーする
# class Api::V1::PostsController < ApplicationController
#   before_action :authenticate # 全アクションに適用

#   def create
#     @post = @current_user.posts.build(post_params)
#     if @post.save
#       render json: @post, status: :created
#     else
#       render json: { message: @post.errors.full_messages }, status: :unprocessable_entity
#     end
#   end

#   def index
#     # 現在のユーザーの投稿のみを表示
#     @posts = @current_user.posts.includes(:category)
#     render json: @posts.as_json(include: { category: { only: [:name] } })
#   end

#   private

#   def post_params
#     params.require(:post).permit(:title, :content, :category_id)
#   end
# end
# create メソッドでは、@current_user.posts.build で認証されたユーザーの投稿を作成します。
# index メソッドでは、現在ログインしているユーザーの投稿のみを表示するようにしています。
# ステップ 3: 認証されたユーザーの投稿のみ表示する
# index メソッドを修正したため、現在のユーザーの投稿のみが表示されます。

# 認証の流れ
# authenticate メソッドで認証されたユーザーがセットされ、@current_user に保存されます。
# そのユーザーの投稿だけが index アクションで返されます。
# ステップ 4: フロントエンドで投稿を表示
# フロントエンド側で、認証されたユーザーの投稿のみを表示します。Next.js や React で、/api/v1/posts エンドポイントにリクエストを送り、そのユーザーの投稿を取得して表示するだけです。

# jsx
# コードをコピーする
# import { useEffect, useState } from 'react';

# const Posts = () => {
#   const [posts, setPosts] = useState([]);

#   useEffect(() => {
#     const fetchPosts = async () => {
#       const res = await fetch('/api/v1/posts', {
#         headers: {
#           Authorization: `Bearer ${localStorage.getItem('token')}`
#         }
#       });
#       const data = await res.json();
#       setPosts(data);
#     };
    
#     fetchPosts();
#   }, []);

#   return (
#     <div>
#       <h1>あなたの投稿</h1>
#       <ul>
#         {posts.map((post) => (
#           <li key={post.id}>
#             <h2>{post.title}</h2>
#             <p>{post.content}</p>
#             <p>{post.category.name}</p>
#           </li>
#         ))}
#       </ul>
#     </div>
#   );
# };

# export default Posts;
# このコードでは、useEffect フックを使ってログインしているユーザーの投稿を取得し、リストに表示しています。

# まとめ
# ユーザーと投稿を関連付ける: Post モデルに user_id を追加して、ユーザーが作成した投稿を管理します。
# 投稿作成時にユーザーを関連付ける: create アクションで、認証されたユーザーが投稿を作成できるようにします。
# ユーザーごとの投稿を表示: index アクションで、認証されたユーザーの投稿だけを返します。